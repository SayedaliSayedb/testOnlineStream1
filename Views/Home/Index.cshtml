@{
    ViewData["Title"] = "پخش زنده";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12 text-center mb-4">
            <h1 class="display-4 text-primary">🎥 سیستم پخش زنده</h1>
            <p class="lead">مدیریت و مانیتورینگ پخش زنده</p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">📊 آمار پخش</h5>
                </div>
                <div class="card-body">
                    <div id="statsContainer">
                        <div class="row text-center">
                            <div class="col-md-3 mb-3">
                                <div class="p-3 bg-light rounded">
                                    <h3 id="viewerCount" class="text-info">0</h3>
                                    <small class="text-muted">بینندگان آنلاین</small>
                                </div>
                            </div>
                            <div class="col-md-3 mb-3">
                                <div class="p-3 bg-light rounded">
                                    <h3 id="streamStatus" class="text-success">آفلاین</h3>
                                    <small class="text-muted">وضعیت پخش</small>
                                </div>
                            </div>
                            <div class="col-md-3 mb-3">
                                <div class="p-3 bg-light rounded">
                                    <h3 id="uptime" class="text-warning">00:00:00</h3>
                                    <small class="text-muted">مدت پخش</small>
                                </div>
                            </div>
                            <div class="col-md-3 mb-3">
                                <div class="p-3 bg-light rounded">
                                    <h3 id="serverTime" class="text-primary">--:--:--</h3>
                                    <small class="text-muted">زمان سرور</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">📋 لیست بینندگان</h5>
                </div>
                <div class="card-body">
                    <div id="viewersList">
                        <p class="text-muted">در حال بارگذاری...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        class StreamManager {
            constructor() {
                this.statsInterval = null;
                this.viewersInterval = null;
                this.initialize();
            }

            initialize() {
                this.setupEventListeners();
                this.startStatsUpdates();
                this.loadViewers();
            }

            setupEventListeners() {
                $('#startStreamBtn').click(() => this.startStream());
                $('#stopStreamBtn').click(() => this.stopStream());
            }

            async startStream() {
                const title = $('#streamTitle').val() || 'پخش زنده بدون عنوان';

                try {
                    const response = await fetch('/Home/StartStream', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ title: title })
                    });

                    const result = await response.json();

                    if (result.success) {
                        this.showAlert('پخش زنده با موفقیت شروع شد', 'success');
                        this.updateUI(true);
                    } else {
                        this.showAlert(result.message, 'error');
                    }
                } catch (error) {
                    console.error('Error starting stream:', error);
                    this.showAlert('خطا در شروع پخش زنده', 'error');
                }
            }

            async stopStream() {
                try {
                    const response = await fetch('/Home/StopStream', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });

                    const result = await response.json();

                    if (result.success) {
                        this.showAlert('پخش زنده با موفقیت متوقف شد', 'success');
                        this.updateUI(false);
                    } else {
                        this.showAlert(result.message, 'error');
                    }
                } catch (error) {
                    console.error('Error stopping stream:', error);
                    this.showAlert('خطا در توقف پخش زنده', 'error');
                }
            }

            updateUI(isStreaming) {
                $('#startStreamBtn').prop('disabled', isStreaming);
                $('#stopStreamBtn').prop('disabled', !isStreaming);

                if (isStreaming) {
                    $('#streamStatus').text('زنده').removeClass('text-success').addClass('text-danger');
                } else {
                    $('#streamStatus').text('آفلاین').removeClass('text-danger').addClass('text-success');
                }
            }

            startStatsUpdates() {
                // به روزرسانی آمار هر 5 ثانیه
                this.statsInterval = setInterval(() => this.updateStats(), 5000);
                this.updateStats();
            }

            async updateStats() {
                try {
                    const response = await fetch('/Home/GetStreamStats');
                    const stats = await response.json();

                    $('#viewerCount').text(stats.viewerCount);
                    $('#serverTime').text(new Date().toLocaleTimeString('fa-IR'));

                    if (stats.uptime) {
                        $('#uptime').text(this.formatTime(stats.uptime));
                    }
                } catch (error) {
                    console.error('Error updating stats:', error);
                }
            }

            async loadViewers() {
                try {
                    const response = await fetch('/api/Viewer/list');
                    const data = await response.json();

                    this.displayViewers(data.viewers);
                } catch (error) {
                    console.error('Error loading viewers:', error);
                }

                // به روزرسانی هر 10 ثانیه
                this.viewersInterval = setInterval(() => this.loadViewers(), 10000);
            }

            displayViewers(viewers) {
                const container = $('#viewersList');

                if (viewers.length === 0) {
                    container.html('<p class="text-muted">هیچ بیننده‌ای آنلاین نیست</p>');
                    return;
                }

                const html = viewers.map(viewer => `
                    <div class="d-flex justify-content-between align-items-center p-2 border-bottom">
                        <div>
                            <strong>${viewer.name}</strong>
                            <small class="text-muted d-block">${this.formatTime(viewer.watchTime)}</small>
                        </div>
                        <span class="badge bg-success">آنلاین</span>
                    </div>
                `).join('');

                container.html(html);
            }

            formatTime(timeSpan) {
                const hours = Math.floor(timeSpan / 3600);
                const minutes = Math.floor((timeSpan % 3600) / 60);
                const seconds = timeSpan % 60;

                return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }

            showAlert(message, type) {
                const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';

                const alertHtml = `
                    <div class="alert ${alertClass} alert-dismissible fade show position-fixed"
                         style="top: 20px; right: 20px; z-index: 1050; min-width: 300px;">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `;

                $('body').append(alertHtml);

                setTimeout(() => {
                    $('.alert').alert('close');
                }, 5000);
            }
        }

        // راه‌اندازی هنگامی که صفحه کاملاً لود شد
        $(document).ready(function() {
            window.streamManager = new StreamManager();
        });
    </script>
}